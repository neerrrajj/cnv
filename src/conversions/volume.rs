use std::str::FromStr;

use super::*;

#[derive(Debug, Clone, Copy)]
pub enum VolumeUnit {
    CubicYoctometer,
    CubicZeptometer,
    CubicAttometer,
    CubicFemtometer,
    CubicPicometer,
    CubicNanometer,
    CubicMicrometer,
    CubicMillimeter,
    CubicCentimeter,
    CubicDecimeter,
    CubicMeter,
    CubicDecameter,
    CubicHectometer,
    CubicKilometer,
    CubicMegameter,
    CubicGigameter,
    CubicTerameter,
    CubicInch,
    CubicFoot,
    CubicYard,
    CubicMile,
    Liter,
    Milliliter,
    Centiliter,
    Deciliter,
    Decaliter,
    Hectoliter,
    Kiloliter,
    Megaliter,
    Gigaliter,
    Teraliter,
    AcreFoot,
    USGallon,
    USQuart,
    USPint,
    USCup,
    USFluidOunce,
    USTablespoon,
    USTeaspoon,
    UKGallon,
    UKQuart,
    UKPint,
    UKCup,
    UKFluidOunce,
    UKTablespoon,
    UKTeaspoon,
    BarrelOil,
    BarrelBeer,
    BarrelWine,
    Bushel,
    Peck,
    USGill,
    UKGill,
    Hogshead,
    Cord,
    Stere,
}

pub struct UnitDef {
    variant: VolumeUnit,
    name: &'static str,
    aliases: &'static [&'static str],
}

const UNIT_DEFS: &[UnitDef] = &[
    UnitDef { variant: VolumeUnit::CubicYoctometer, name: "Cubic Yoctometer", aliases: &["ym3", "cubic yoctometer", "cubic yoctometers"] },
    UnitDef { variant: VolumeUnit::CubicZeptometer, name: "Cubic Zeptometer", aliases: &["zm3", "cubic zeptometer", "cubic zeptometers"] },
    UnitDef { variant: VolumeUnit::CubicAttometer, name: "Cubic Attometer", aliases: &["am3", "cubic attometer", "cubic attometers"] },
    UnitDef { variant: VolumeUnit::CubicFemtometer, name: "Cubic Femtometer", aliases: &["fm3", "cubic femtometer", "cubic femtometers"] },
    UnitDef { variant: VolumeUnit::CubicPicometer, name: "Cubic Picometer", aliases: &["pm3", "cubic picometer", "cubic picometers"] },
    UnitDef { variant: VolumeUnit::CubicNanometer, name: "Cubic Nanometer", aliases: &["nm3", "cubic nanometer", "cubic nanometers"] },
    UnitDef { variant: VolumeUnit::CubicMicrometer, name: "Cubic Micrometer", aliases: &["Âµm3", "um3", "cubic micrometer", "cubic micrometers"] },
    UnitDef { variant: VolumeUnit::CubicMillimeter, name: "Cubic Millimeter", aliases: &["mm3", "cubic millimeter", "cubic millimeters"] },
    UnitDef { variant: VolumeUnit::CubicCentimeter, name: "Cubic Centimeter", aliases: &["cm3", "cc", "cubic centimeter", "cubic centimeters"] },
    UnitDef { variant: VolumeUnit::CubicDecimeter, name: "Cubic Decimeter", aliases: &["dm3", "cubic decimeter", "cubic decimeters"] },
    UnitDef { variant: VolumeUnit::CubicMeter, name: "Cubic Meter", aliases: &["m3", "cubic meter", "cubic meters"] },
    UnitDef { variant: VolumeUnit::CubicDecameter, name: "Cubic Decameter", aliases: &["dam3", "cubic decameter", "cubic decameters"] },
    UnitDef { variant: VolumeUnit::CubicHectometer, name: "Cubic Hectometer", aliases: &["hm3", "cubic hectometer", "cubic hectometers"] },
    UnitDef { variant: VolumeUnit::CubicKilometer, name: "Cubic Kilometer", aliases: &["km3", "cubic kilometer", "cubic kilometers"] },
    UnitDef { variant: VolumeUnit::CubicMegameter, name: "Cubic Megameter", aliases: &["Mm3", "cubic megameter", "cubic megameters"] },
    UnitDef { variant: VolumeUnit::CubicGigameter, name: "Cubic Gigameter", aliases: &["Gm3", "cubic gigameter", "cubic gigameters"] },
    UnitDef { variant: VolumeUnit::CubicTerameter, name: "Cubic Terameter", aliases: &["Tm3", "cubic terameter", "cubic terameters"] },
    UnitDef { variant: VolumeUnit::CubicInch, name: "Cubic Inch", aliases: &["in3", "cubic inch", "cubic inches"] },
    UnitDef { variant: VolumeUnit::CubicFoot, name: "Cubic Foot", aliases: &["ft3", "cubic foot", "cubic feet"] },
    UnitDef { variant: VolumeUnit::CubicYard, name: "Cubic Yard", aliases: &["yd3", "cubic yard", "cubic yards"] },
    UnitDef { variant: VolumeUnit::CubicMile, name: "Cubic Mile", aliases: &["mi3", "cubic mile", "cubic miles"] },
    UnitDef { variant: VolumeUnit::Liter, name: "Liter", aliases: &["l", "L", "liter", "liters", "litre", "litres"] },
    UnitDef { variant: VolumeUnit::Milliliter, name: "Milliliter", aliases: &["ml", "mL", "milliliter", "milliliters", "millilitre", "millilitres"] },
    UnitDef { variant: VolumeUnit::Centiliter, name: "Centiliter", aliases: &["cl", "cL", "centiliter", "centiliters", "centilitre", "centilitres"] },
    UnitDef { variant: VolumeUnit::Deciliter, name: "Deciliter", aliases: &["dl", "dL", "deciliter", "deciliters", "decilitre", "decilitres"] },
    UnitDef { variant: VolumeUnit::Decaliter, name: "Decaliter", aliases: &["dal", "daL", "decaliter", "decaliters", "dekaliter", "dekaliters"] },
    UnitDef { variant: VolumeUnit::Hectoliter, name: "Hectoliter", aliases: &["hl", "hL", "hectoliter", "hectoliters", "hectolitre", "hectolitres"] },
    UnitDef { variant: VolumeUnit::Kiloliter, name: "Kiloliter", aliases: &["kl", "kL", "kiloliter", "kiloliters", "kilolitre", "kilolitres"] },
    UnitDef { variant: VolumeUnit::Megaliter, name: "Megaliter", aliases: &["Ml", "ML", "megaliter", "megaliters", "megalitre", "megalitres"] },
    UnitDef { variant: VolumeUnit::Gigaliter, name: "Gigaliter", aliases: &["Gl", "GL", "gigaliter", "gigaliters", "gigalitre", "gigalitres"] },
    UnitDef { variant: VolumeUnit::Teraliter, name: "Teraliter", aliases: &["Tl", "TL", "teraliter", "teraliters", "teralitre", "teralitres"] },
    UnitDef { variant: VolumeUnit::AcreFoot, name: "Acre-Foot", aliases: &["acre-ft", "acre foot", "acre feet"] },
    UnitDef { variant: VolumeUnit::USGallon, name: "US Gallon", aliases: &["gal", "gallon", "gallons", "us gal", "us gallon", "us gallons", "liquid gallon"] },
    UnitDef { variant: VolumeUnit::USQuart, name: "US Quart", aliases: &["qt", "quart", "quarts", "us qt", "us quart", "us quarts"] },
    UnitDef { variant: VolumeUnit::USPint, name: "US Pint", aliases: &["pt", "pint", "pints", "us pt", "us pint", "us pints"] },
    UnitDef { variant: VolumeUnit::USCup, name: "US Cup", aliases: &["cup", "cups", "us cup", "us cups"] },
    UnitDef { variant: VolumeUnit::USFluidOunce, name: "US Fluid Ounce", aliases: &["fl oz", "fluid ounce", "fluid ounces", "us fl oz", "us fluid ounce", "us fluid ounces"] },
    UnitDef { variant: VolumeUnit::USTablespoon, name: "US Tablespoon", aliases: &["tbsp", "us tbsp", "tablespoon", "tablespoons", "us tablespoon", "us tablespoons"] },
    UnitDef { variant: VolumeUnit::USTeaspoon, name: "US Teaspoon", aliases: &["tsp", "teaspoon", "teaspoons", "us tsp", "us teaspoon", "us teaspoons"] },
    UnitDef { variant: VolumeUnit::UKGallon, name: "Imperial Gallon", aliases: &["uk gal", "uk gallon", "uk gallons", "imperial gallon", "imperial gallons"] },
    UnitDef { variant: VolumeUnit::UKQuart, name: "Imperial Quart", aliases: &["uk qt", "uk quart", "uk quarts", "imperial quart", "imperial quarts"] },
    UnitDef { variant: VolumeUnit::UKPint, name: "Imperial Pint", aliases: &["uk pt", "uk pint", "uk pints", "imperial pint", "imperial pints"] },
    UnitDef { variant: VolumeUnit::UKCup, name: "Imperial Cup", aliases: &["uk cup", "uk cups", "imperial cup", "imperial cups"] },
    UnitDef { variant: VolumeUnit::UKFluidOunce, name: "Imperial Fluid Ounce", aliases: &["uk fl oz", "uk fluid ounce", "uk fluid ounces", "imperial fluid ounce", "imperial fluid ounces"] },
    UnitDef { variant: VolumeUnit::UKTablespoon, name: "Imperial Tablespoon", aliases: &["uk tbsp", "uk tablespoon", "uk tablespoons", "imperial tablespoon", "imperial tablespoons"] },
    UnitDef { variant: VolumeUnit::UKTeaspoon, name: "Imperial Teaspoon", aliases: &["uk tsp", "uk teaspoon", "uk teaspoons", "imperial teaspoon", "imperial teaspoons"] },
    UnitDef { variant: VolumeUnit::BarrelOil, name: "Oil Barrel", aliases: &["bbl", "barrel", "barrels", "oil barrel", "oil barrels", "petroleum barrel"] },
    UnitDef { variant: VolumeUnit::BarrelBeer, name: "Beer Barrel", aliases: &["beer bbl", "beer barrel", "beer barrels"] },
    UnitDef { variant: VolumeUnit::BarrelWine, name: "Wine Barrel", aliases: &["wine bbl", "wine barrel", "wine barrels"] },
    UnitDef { variant: VolumeUnit::Bushel, name: "Bushel", aliases: &["bu", "bushel", "bushels"] },
    UnitDef { variant: VolumeUnit::Peck, name: "Peck", aliases: &["pk", "peck", "pecks"] },
    UnitDef { variant: VolumeUnit::USGill, name: "US Gill", aliases: &["us gill"] },
    UnitDef { variant: VolumeUnit::UKGill, name: "UK Gill", aliases: &["uk gill"] },
    UnitDef { variant: VolumeUnit::Hogshead, name: "Hogshead", aliases: &["hhd", "hogshead"] },
    UnitDef { variant: VolumeUnit::Cord, name: "Cord", aliases: &["cord", "firewood cord"] },
    UnitDef { variant: VolumeUnit::Stere, name: "Stere", aliases: &["st", "stere", "cubic meter"] },
];

impl_conversion_traits!(VolumeUnit, UNIT_DEFS);

pub fn help_text() -> String {
    VolumeUnit::generate_help_text()
}

impl VolumeUnit {
    fn factor(&self) -> f64 {
        use VolumeUnit::*;

        match self {
            CubicYoctometer => 1e-72,
            CubicZeptometer => 1e-63,
            CubicAttometer => 1e-54,
            CubicFemtometer => 1e-45,
            CubicPicometer => 1e-36,
            CubicNanometer => 1e-27,
            CubicMicrometer => 1e-18,
            CubicMillimeter => 1e-9,
            CubicCentimeter => 1e-6,
            CubicDecimeter => 1e-3,
            CubicMeter => 1.0,
            CubicDecameter => 1e3,
            CubicHectometer => 1e6,
            CubicKilometer => 1e9,
            CubicMegameter => 1e12,
            CubicGigameter => 1e15,
            CubicTerameter => 1e18,
            CubicInch => 0.000016387064,
            CubicFoot => 0.0283168466,
            CubicYard => 0.764554858,
            CubicMile => 4.16818183e9,
            Liter => 0.001,
            Milliliter => 1e-6,
            Centiliter => 1e-5,
            Deciliter => 1e-4,
            Decaliter => 0.01,
            Hectoliter => 0.1,
            Kiloliter => 1.0,
            Megaliter => 1e3,
            Gigaliter => 1e6,
            Teraliter => 1e9,
            USGallon => 0.003785411784,
            USQuart => 0.000946352946,
            USPint => 0.000473176473,
            USCup => 0.0002365882365,
            USFluidOunce => 0.00002957352956,
            USTablespoon => 0.00001478676478,
            USTeaspoon => 0.000004928921593,
            UKGallon => 0.00454609,
            UKQuart => 0.0011365225,
            UKPint => 0.00056826125,
            UKCup => 0.000284130625,
            UKFluidOunce => 0.0000284130625,
            UKTablespoon => 0.00001775816406,
            UKTeaspoon => 0.000005919388021,
            BarrelOil => 0.158987294928,
            BarrelBeer => 0.117347765304,
            BarrelWine => 0.119240471196,
            Bushel => 0.03523907016688,
            Peck => 0.00880976754172,
            USGill => 0.00011829411825,
            UKGill => 0.0001420653125,
            Hogshead => 0.238480942392,
            Cord => 3.624556363776,
            Stere => 1.0,
            AcreFoot => 1233.48183754752,
        }
    }
}

pub fn convert(value: f64, from_unit: &str, to_unit: &str) -> Result<f64, &'static str> {
    let from: VolumeUnit = from_unit.parse()?;
    let to: VolumeUnit = to_unit.parse()?;

    let result = value * from.factor() / to.factor();
    Ok((result * 10000.0).round()/10000.0)
}
