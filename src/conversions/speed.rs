use std::str::FromStr;

use super::*;

#[derive(Debug, Clone, Copy)]
pub enum SpeedUnit {
    YoctometerPerSecond,
    ZeptometerPerSecond,
    AttometerPerSecond,
    FemtometerPerSecond,
    PicometerPerSecond,
    NanometerPerSecond,
    MicrometerPerSecond,
    MillimeterPerSecond,
    CentimeterPerSecond,
    DecimeterPerSecond,
    MeterPerSecond,
    DecameterPerSecond,
    HectometerPerSecond,
    KilometerPerSecond,
    MegameterPerSecond,
    GigameterPerSecond,
    TerameterPerSecond,
    PicometerPerMinute,
    NanometerPerMinute,
    MicrometerPerMinute,
    MillimeterPerMinute,
    CentimeterPerMinute,
    MeterPerMinute,
    KilometerPerMinute,
    MegameterPerMinute,
    GigameterPerMinute,
    TerameterPerMinute,
    PicometerPerHour,
    NanometerPerHour,
    MicrometerPerHour,
    MillimeterPerHour,
    CentimeterPerHour,
    MeterPerHour,
    KilometerPerHour,
    MegameterPerHour,
    GigameterPerHour,
    TerameterPerHour,
    MilePerSecond,
    MilePerMinute,
    MilePerHour,
    FootPerSecond,
    FootPerMinute,
    FootPerHour,
    InchPerSecond,
    InchPerMinute,
    InchPerHour,
    YardPerSecond,
    YardPerMinute,
    YardPerHour,
    FurlongPerFortnight,
    LeaguePerHour,
    Knot,
    AdmiraltyKnot,
    Mach,
    SpeedOfLight,
    CosmicVelocityFirst,
    CosmicVelocitySecond,
    CosmicVelocityThird,
    AstronomicalUnitPerDay,
    ParsecPerYear,
    FractionOfLightSpeed,
}

pub struct UnitDef {
    variant: SpeedUnit,
    name: &'static str,
    aliases: &'static [&'static str],
}

const UNIT_DEFS: &[UnitDef] = &[
    UnitDef { variant: SpeedUnit::YoctometerPerSecond, name: "YoctometerPerSecond", aliases: &["ym/s", "yoctometer per second", "yoctometers per second", "yoctometre per second", "yoctometres per second"] },
    UnitDef { variant: SpeedUnit::ZeptometerPerSecond, name: "ZeptometerPerSecond", aliases: &["zm/s", "zeptometer per second", "zeptometers per second", "zeptometre per second", "zeptometres per second"] },
    UnitDef { variant: SpeedUnit::AttometerPerSecond, name: "AttometerPerSecond", aliases: &["am/s", "attometer per second", "attometers per second", "attometre per second", "attometres per second"] },
    UnitDef { variant: SpeedUnit::FemtometerPerSecond, name: "FemtometerPerSecond", aliases: &["fm/s", "femtometer per second", "femtometers per second", "femtometre per second", "femtometres per second"] },
    UnitDef { variant: SpeedUnit::PicometerPerSecond, name: "PicometerPerSecond", aliases: &["pm/s", "picometer per second", "picometers per second", "picometre per second", "picometres per second"] },
    UnitDef { variant: SpeedUnit::NanometerPerSecond, name: "NanometerPerSecond", aliases: &["nm/s", "nanometer per second", "nanometers per second", "nanometre per second", "nanometres per second"] },
    UnitDef { variant: SpeedUnit::MicrometerPerSecond, name: "MicrometerPerSecond", aliases: &["µm/s", "um/s", "micrometer per second", "micrometers per second", "micrometre per second", "micrometres per second"] },
    UnitDef { variant: SpeedUnit::MillimeterPerSecond, name: "MillimeterPerSecond", aliases: &["mm/s", "millimeter per second", "millimeters per second", "millimetre per second", "millimetres per second"] },
    UnitDef { variant: SpeedUnit::CentimeterPerSecond, name: "CentimeterPerSecond", aliases: &["cm/s", "centimeter per second", "centimeters per second", "centimetre per second", "centimetres per second"] },
    UnitDef { variant: SpeedUnit::DecimeterPerSecond, name: "DecimeterPerSecond", aliases: &["dm/s", "decimeter per second", "decimeters per second", "decimetre per second", "decimetres per second"] },
    UnitDef { variant: SpeedUnit::MeterPerSecond, name: "MeterPerSecond", aliases: &["m/s", "meter per second", "metre per second", "meters per second", "metres per second", "mps"] },
    UnitDef { variant: SpeedUnit::DecameterPerSecond, name: "DecameterPerSecond", aliases: &["dam/s", "decameter per second", "decametre per second", "decameters per second", "decametres per second"] },
    UnitDef { variant: SpeedUnit::HectometerPerSecond, name: "HectometerPerSecond", aliases: &["hm/s", "hectometer per second", "hectometre per second", "hectometers per second", "hectometres per second"] },
    UnitDef { variant: SpeedUnit::KilometerPerSecond, name: "KilometerPerSecond", aliases: &["km/s", "kilometer per second", "kilometre per second", "kilometers per second", "kilometres per second"] },
    UnitDef { variant: SpeedUnit::MegameterPerSecond, name: "MegameterPerSecond", aliases: &["Mm/s", "megameter per second", "megametre per second", "megameters per second", "megametres per second"] },
    UnitDef { variant: SpeedUnit::GigameterPerSecond, name: "GigameterPerSecond", aliases: &["Gm/s", "gigameter per second", "gigametre per second", "gigameters per second", "gigametres per second"] },
    UnitDef { variant: SpeedUnit::TerameterPerSecond, name: "TerameterPerSecond", aliases: &["Tm/s", "terameter per second", "terametre per second", "terameters per second", "terametres per second"] },
    UnitDef { variant: SpeedUnit::PicometerPerMinute, name: "PicometerPerMinute", aliases: &["pm/min", "picometer per minute", "picometers per minute", "picometre per minute", "picometres per minute"] },
    UnitDef { variant: SpeedUnit::NanometerPerMinute, name: "NanometerPerMinute", aliases: &["nm/min", "nanometer per minute", "nanometers per minute", "nanometre per minute", "nanometres per minute"] },
    UnitDef { variant: SpeedUnit::MicrometerPerMinute, name: "MicrometerPerMinute", aliases: &["µm/min", "um/min", "micrometer per minute", "micrometers per minute", "micrometre per minute", "micrometres per minute"] },
    UnitDef { variant: SpeedUnit::MillimeterPerMinute, name: "MillimeterPerMinute", aliases: &["mm/min", "millimeter per minute", "millimeters per minute", "millimetre per minute", "millimetres per minute"] },
    UnitDef { variant: SpeedUnit::CentimeterPerMinute, name: "CentimeterPerMinute", aliases: &["cm/min", "centimeter per minute", "centimeters per minute", "centimetre per minute", "centimetres per minute"] },
    UnitDef { variant: SpeedUnit::MeterPerMinute, name: "MeterPerMinute", aliases: &["m/min", "meter per minute", "metre per minute", "meters per minute", "metres per minute"] },
    UnitDef { variant: SpeedUnit::KilometerPerMinute, name: "KilometerPerMinute", aliases: &["km/min", "kilometer per minute", "kilometre per minute", "kilometers per minute", "kilometres per minute"] },
    UnitDef { variant: SpeedUnit::MegameterPerMinute, name: "MegameterPerMinute", aliases: &["Mm/min", "megameter per minute", "megametre per minute", "megameters per minute", "megametres per minute"] },
    UnitDef { variant: SpeedUnit::GigameterPerMinute, name: "GigameterPerMinute", aliases: &["Gm/min", "gigameter per minute", "gigametre per minute", "gigameters per minute", "gigametres per minute"] },
    UnitDef { variant: SpeedUnit::TerameterPerMinute, name: "TerameterPerMinute", aliases: &["Tm/min", "terameter per minute", "terametre per minute", "terameters per minute", "terametres per minute"] },
    UnitDef { variant: SpeedUnit::PicometerPerHour, name: "PicometerPerHour", aliases: &["pm/h", "picometer per hour", "picometers per hour", "picometre per hour", "picometres per hour"] },
    UnitDef { variant: SpeedUnit::NanometerPerHour, name: "NanometerPerHour", aliases: &["nm/h", "nanometer per hour", "nanometers per hour", "nanometre per hour", "nanometres per hour"] },
    UnitDef { variant: SpeedUnit::MicrometerPerHour, name: "MicrometerPerHour", aliases: &["µm/h", "um/h", "micrometer per hour", "micrometers per hour", "micrometre per hour", "micrometres per hour"] },
    UnitDef { variant: SpeedUnit::MillimeterPerHour, name: "MillimeterPerHour", aliases: &["mm/h", "millimeter per hour", "millimeters per hour", "millimetre per hour", "millimetres per hour"] },
    UnitDef { variant: SpeedUnit::CentimeterPerHour, name: "CentimeterPerHour", aliases: &["cm/h", "centimeter per hour", "centimeters per hour", "centimetre per hour", "centimetres per hour"] },
    UnitDef { variant: SpeedUnit::MeterPerHour, name: "MeterPerHour", aliases: &["m/h", "meter per hour", "metre per hour", "meters per hour", "metres per hour"] },
    UnitDef { variant: SpeedUnit::KilometerPerHour, name: "KilometerPerHour", aliases: &["km/h", "kph", "kmph", "kilometer per hour", "kilometre per hour", "kilometers per hour", "kilometres per hour"] },
    UnitDef { variant: SpeedUnit::MegameterPerHour, name: "MegameterPerHour", aliases: &["Mm/h", "megameter per hour", "megametre per hour", "megameters per hour", "megametres per hour"] },
    UnitDef { variant: SpeedUnit::GigameterPerHour, name: "GigameterPerHour", aliases: &["Gm/h", "gigameter per hour", "gigametre per hour", "gigameters per hour", "gigametres per hour"] },
    UnitDef { variant: SpeedUnit::TerameterPerHour, name: "TerameterPerHour", aliases: &["Tm/h", "terameter per hour", "terametre per hour", "terameters per hour", "terametres per hour"] },
    UnitDef { variant: SpeedUnit::MilePerSecond, name: "MilePerSecond", aliases: &["mi/s", "mile per second", "miles per second"] },
    UnitDef { variant: SpeedUnit::MilePerMinute, name: "MilePerMinute", aliases: &["mi/min", "mile per minute", "miles per minute"] },
    UnitDef { variant: SpeedUnit::MilePerHour, name: "MilePerHour", aliases: &["mph", "mi/h", "mile per hour", "miles per hour"] },
    UnitDef { variant: SpeedUnit::FootPerSecond, name: "FootPerSecond", aliases: &["ft/s", "fps", "foot per second", "feet per second"] },
    UnitDef { variant: SpeedUnit::FootPerMinute, name: "FootPerMinute", aliases: &["ft/min", "fpm", "foot per minute", "feet per minute"] },
    UnitDef { variant: SpeedUnit::FootPerHour, name: "FootPerHour", aliases: &["ft/h", "fph", "foot per hour", "feet per hour"] },
    UnitDef { variant: SpeedUnit::InchPerSecond, name: "InchPerSecond", aliases: &["in/s", "ips", "inch per second", "inches per second"] },
    UnitDef { variant: SpeedUnit::InchPerMinute, name: "InchPerMinute", aliases: &["in/min", "ipm", "inch per minute", "inches per minute"] },
    UnitDef { variant: SpeedUnit::InchPerHour, name: "InchPerHour", aliases: &["in/h", "iph", "inch per hour", "inches per hour"] },
    UnitDef { variant: SpeedUnit::YardPerSecond, name: "YardPerSecond", aliases: &["yd/s", "yard per second", "yards per second"] },
    UnitDef { variant: SpeedUnit::YardPerMinute, name: "YardPerMinute", aliases: &["yd/min", "yard per minute", "yards per minute"] },
    UnitDef { variant: SpeedUnit::YardPerHour, name: "YardPerHour", aliases: &["yd/h", "yard per hour", "yards per hour"] },
    UnitDef { variant: SpeedUnit::FurlongPerFortnight, name: "FurlongPerFortnight", aliases: &["fpf", "furlong per fortnight", "furlongs per fortnight"] },
    UnitDef { variant: SpeedUnit::LeaguePerHour, name: "LeaguePerHour", aliases: &["league/h", "league per hour", "leagues per hour"] },
    UnitDef { variant: SpeedUnit::Knot, name: "Knot", aliases: &["kt", "kn", "knot", "knots", "nautical mile per hour"] },
    UnitDef { variant: SpeedUnit::AdmiraltyKnot, name: "AdmiraltyKnot", aliases: &["admiralty knot", "UK knot", "imperial knot"] },
    UnitDef { variant: SpeedUnit::Mach, name: "Mach", aliases: &["Ma", "mach", "speed of sound"] },
    UnitDef { variant: SpeedUnit::SpeedOfLight, name: "SpeedOfLight", aliases: &["c", "lightspeed", "light speed"] },
    UnitDef { variant: SpeedUnit::CosmicVelocityFirst, name: "CosmicVelocityFirst", aliases: &["first cosmic velocity", "orbital speed"] },
    UnitDef { variant: SpeedUnit::CosmicVelocitySecond, name: "CosmicVelocitySecond", aliases: &["second cosmic velocity", "escape velocity"] },
    UnitDef { variant: SpeedUnit::CosmicVelocityThird, name: "CosmicVelocityThird", aliases: &["third cosmic velocity", "galactic escape velocity"] },
    UnitDef { variant: SpeedUnit::AstronomicalUnitPerDay, name: "AstronomicalUnitPerDay", aliases: &["AU/day", "astronomical unit per day", "astronomical units per day"] },
    UnitDef { variant: SpeedUnit::ParsecPerYear, name: "ParsecPerYear", aliases: &["pc/yr", "parsec per year", "parsecs per year"] },
    UnitDef { variant: SpeedUnit::FractionOfLightSpeed, name: "FractionOfLightSpeed", aliases: &["c", "fraction of c", "lightspeed fraction", "light speed fraction"] },
];

impl_conversion_traits!(SpeedUnit, UNIT_DEFS);

pub fn help_text() -> String {
    SpeedUnit::generate_help_text()
}

impl SpeedUnit {
    fn factor(&self) -> f64 {
        use SpeedUnit::*;
        
        match self {
            YoctometerPerSecond => 1e-24,
            ZeptometerPerSecond => 1e-21,
            AttometerPerSecond => 1e-18,
            FemtometerPerSecond => 1e-15,
            PicometerPerSecond => 1e-12,
            NanometerPerSecond => 1e-9,
            MicrometerPerSecond => 1e-6,
            MillimeterPerSecond => 1e-3,
            CentimeterPerSecond => 1e-2,
            DecimeterPerSecond => 1e-1,
            MeterPerSecond => 1.0,
            DecameterPerSecond => 1e1,
            HectometerPerSecond => 1e2,
            KilometerPerSecond => 1e3,
            MegameterPerSecond => 1e6,
            GigameterPerSecond => 1e9,
            TerameterPerSecond => 1e12,
            PicometerPerMinute => 1e-12 / 60.0,
            NanometerPerMinute => 1e-9 / 60.0,
            MicrometerPerMinute => 1e-6 / 60.0,
            MillimeterPerMinute => 1e-3 / 60.0,
            CentimeterPerMinute => 1e-2 / 60.0,
            MeterPerMinute => 1.0 / 60.0,
            KilometerPerMinute => 1e3 / 60.0,
            MegameterPerMinute => 1e6 / 60.0,
            GigameterPerMinute => 1e9 / 60.0,
            TerameterPerMinute => 1e12 / 60.0,
            PicometerPerHour => 1e-12 / 3600.0,
            NanometerPerHour => 1e-9 / 3600.0,
            MicrometerPerHour => 1e-6 / 3600.0,
            MillimeterPerHour => 1e-3 / 3600.0,
            CentimeterPerHour => 1e-2 / 3600.0,
            MeterPerHour => 1.0 / 3600.0,
            KilometerPerHour => 1e3 / 3600.0,  // ≈ 0.2777778
            MegameterPerHour => 1e6 / 3600.0,
            GigameterPerHour => 1e9 / 3600.0,
            TerameterPerHour => 1e12 / 3600.0,
            MilePerSecond => 1609.344,
            MilePerMinute => 1609.344 / 60.0,
            MilePerHour => 1609.344 / 3600.0,
            FootPerSecond => 0.3048,
            FootPerMinute => 0.3048 / 60.0,
            FootPerHour => 0.3048 / 3600.0,
            InchPerSecond => 0.0254,
            InchPerMinute => 0.0254 / 60.0,
            InchPerHour => 0.0254 / 3600.0,
            YardPerSecond => 0.9144,
            YardPerMinute => 0.9144 / 60.0,
            YardPerHour => 0.9144 / 3600.0,
            FurlongPerFortnight => (201.168) / (1209600.0),
            LeaguePerHour => (4828.032) / 3600.0,
            Knot => 1852.0 / 3600.0,
            AdmiraltyKnot => 1853.184 / 3600.0,
            Mach => 343.0,
            SpeedOfLight => 299792458.0,
            CosmicVelocityFirst => 7919.7,
            CosmicVelocitySecond => 11186.0,
            CosmicVelocityThird => 16670.0,
            AstronomicalUnitPerDay => 149597870700.0 / 86400.0,
            ParsecPerYear => 3.08567758149137e16 / 31557600.0,
            FractionOfLightSpeed => 299792458.0,
        }
    }
}
pub fn convert(value: f64, from_unit: &str, to_unit: &str) -> Result<f64, &'static str> {
    let from: SpeedUnit = from_unit.parse()?;
    let to: SpeedUnit = to_unit.parse()?;

    let result = value * from.factor() / to.factor();
    Ok((result * 10000.0).round() / 10000.0)
}
